import json
import boto3
import base64
from zipfile import ZipFile 
import io
from botocore.exceptions import ClientError
from subprocess import call
def get_secret():

    secret_name = "digitaloceans3"
    region_name = "us-west-2"

 # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )
    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response['SecretString']
            j = json.loads(secret)
            #aws_access_key_id = j['aws_access_key_id']
            #aws_secret_access_key = j['aws_secret_access_key']
            return(j)
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            print("password binary:" + decoded_binary_secret)
            aws_access_key_id = decoded_binary_secret.aws_access_key_id
            aws_secret_access_key = decoded_binary_secret.aws_secret_access_key
          

def lambda_handler(event, context):
    call('rm -rf /tmp/*', shell=True)
    k=get_secret()
    s3=boto3.resource('s3', 
                  aws_access_key_id=k['aws_access_key_id'],
                  aws_secret_access_key=k['aws_secret_access_key'],
                  region_name='sfo2',
                  endpoint_url='https://sfo2.digitaloceanspaces.com')
                  
    prefix = 'monthly_extracts/'
    bucket = s3.Bucket(name="tech4pets-ginnie-us")
    FilesNotFound = True
    files=[]
    for obj in bucket.objects.filter(Prefix=prefix):
        f=obj.key[17:]
        if f !="":
            files.append(f)
        FilesNotFound = False
    print(files)
    if FilesNotFound:
        print("ALERT", "No file in {0}/{1}".format(bucket, prefix))
    for file in files:
        file_src='monthly_extracts/'+str(file)
        file_name='pet_sales/'+str(file)
        tmp='/tmp/'+str(file)
        print("Downloading: "+file)
        s3.Bucket('tech4pets-ginnie-us').download_file(file_src,tmp)
        with ZipFile(tmp, 'r') as zip: 
    # printing all the contents of the zip file 
            zip.printdir() 
    # extracting all the files 
            print('Extracting all the files now...') 
            zip.extractall('/tmp/')  
            destdir=[]
            for f in zip.filelist:
                destdir.append(f.filename)
        print(destdir)
        s=boto3.client('s3')        
        for f in destdir:
            tmp='/tmp/'+str(f)
            dest='People/External/Pet_Sales_Craigslist/'+'year='+file[23:-7]+'/'+'month='+file[28:-4]+'/'+str(f)
            s.upload_file(tmp,"bfas-sandbox-s3-swamp",dest)
            print(dest+" upload complete")
        call('rm -rf /tmp/*', shell=True)    
    print("Done!!")  
    call('rm -rf /tmp/*', shell=True)
    # TODO implement
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
